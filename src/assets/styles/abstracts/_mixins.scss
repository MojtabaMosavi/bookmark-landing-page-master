@use "./variables";
@use "./functions";
/*-----------------------------------------------*\
    #mixins
\*-----------------------------------------------*/

/// define custom media queries
/// @param{string} $breakPoint
/// name of variables referenced from breakPoints in _variables.scss
@mixin respond-to($breakPoint) {
  @media screen and (min-width: map-get($map:variables.$breakPoints,$key:$breakPoint)) {
    @content;
  }
}

/// define a flex container
/// $param{string} $al-con, $js-con
/// horisontell or vertical alignment of flex-items depending of $flex-d
/// @param{string} $flex-d
/// flex-direction
@mixin flexify($al-con: center, $js-con: space-between, $flex-d: row) {
  display: flex;
  align-items: $al-con;
  justify-content: $js-con;
  flex-direction: $flex-d;
}

/// centers an element
/// @param{string} $position
/// orientation for centering
@mixin center($position) {
  @if $position == "vertical" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == "horizontal" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
  } @else if $position == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
  }
}

/*!Mixin used for setting fluid properties such as typography and widths
src = https://codepen.io/MadeByMike/pen/vNrvdZ?editors=0110
//Renamed some variables
*/

/// used of setting fulid properties such as fontsize
@mixin interpolate(
  $properties,
  $min-screen,
  $max-screen,
  $min-value,
  $max-value
) {
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-screen) {
      @each $property in $properties {
        #{$property}: functions.calc-interpolation(
          $min-screen,
          $min-value,
          $max-screen,
          $max-value
        );
      }
    }

    @media screen and (min-width: $max-screen) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}
